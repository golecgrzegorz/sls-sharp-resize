service: sls-sharp-resize
frameworkVersion: '3'

package:
  individually: true
  exclude:
    - ./layer/*

custom:
  sourceBucket: bucket-media-upload
  targetBucket: bucket-media-serve

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-central-1'}
  profile: global-lambdas
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:PutObjectAcl
      Resource: [
        "arn:aws:s3:::${self:custom.sourceBucket}",
        "arn:aws:s3:::${self:custom.sourceBucket}/*",
        "arn:aws:s3:::${self:custom.targetBucket}",
        "arn:aws:s3:::${self:custom.targetBucket}/*"
      ]

layers:
  sharpbinary:
    name: sharp-binary
    description: Sharp nodejs library
    compatibleRuntimes:
      - nodejs18.x
    compatibleArchitectures:
      - x86_64
    package:
      artifact: layer/sharp.zip

functions:
  processImageAssets:
    handler: src/trigger.onUploadProcessImage
    timeout: 60
    memorySize: 1024
    layers:
      - !Ref SharpbinaryLambdaLayer
    events:
      - s3:
          bucket: ${self:custom.sourceBucket}
          event: s3:ObjectCreated:*
          rules:
            - prefix: upload/
            - suffix: .jpg
          existing: true
      - s3:
          bucket: ${self:custom.sourceBucket}
          event: s3:ObjectCreated:*
          rules:
            - prefix: upload/
            - suffix: .jpeg
          existing: true
      - s3:
          bucket: ${self:custom.sourceBucket}
          event: s3:ObjectCreated:*
          rules:
            - prefix: upload/
            - suffix: .png
          existing: true
    environment:
      TARGET_BUCKET: ${self:custom.targetBucket}

resources:
  Resources:
    # UPLOAD BUCKET
    sourceBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.sourceBucket}
        AccessControl: Private
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: false
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - PUT
                - POST
                - HEAD
              AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"

    # SERVE BUCKET
    targetBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.targetBucket}
        AccessControl: Private
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false

    # POLICIES
    targetBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action:
                - 's3:GetObject'
              Resource: arn:aws:s3:::${self:custom.targetBucket}/*
        Bucket:
          Ref: targetBucket